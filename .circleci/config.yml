version: 2.1

jobs:
  build:
    machine:
      image: circleci/classic:latest

    steps:
      - checkout
      - restore_cache:
          keys:
            - image_cache-{{ checksum "Dockerfile" }}
      - add_ssh_keys:
          fingerprints:
            - "f9:fc:d7:c4:a9:17:3d:09:ee:03:d7:f9:6e:0d:f5:2b"

      - run:
          name: Load Docker image from cache if present
          command: if [[ -e ~/docker/image.tar ]]; then docker load -i ~/docker/image.tar; fi
      - run:
          name: Write git tag name to text file "version"
          command: git describe --tags --always > version
      - run:
          name: Build Docker container
          command: docker build -t bids/${CIRCLE_PROJECT_REPONAME,,} .
          no_output_timeout: 6h
      - run:
          name: Save built Docker container to cache
          command: mkdir -p ~/docker; docker save "bids/${CIRCLE_PROJECT_REPONAME,,}" > ~/docker/image.tar
      - save_cache:
          key: image_cache-{{ git describe --tags --always }}-{{ .Revision }}-{{ epoch }}
          paths:
            - "~/docker"

  test:
    machine:
      image: circleci/classic:latest

    steps:
      - checkout
      - restore_cache:
          key: image_cache-{{ checksum "Dockerfile" }}-{{ .Revision }}-{{ epoch }}
      - run:
          name: Print version
          command: docker run -ti --rm --read-only -v /tmp:/tmp -v /var/tmp:/var/tmp -v ${HOME}/data:/bids_dataset bids/${CIRCLE_PROJECT_REPONAME,,} --version
      - run:
          name: Download test data
          command: wget -c -P ${HOME}/downloads/ "https://www.dropbox.com/s/u3uvf857jf4iqq1/MRtrix3_connectome_data_ver2.tar" && mkdir -p ${HOME}/data && tar xf ${HOME}/downloads/MRtrix3_connectome_data_ver2.tar -C ${HOME}/data
      - run:
          name: Make output directory
          command: mkdir -p ${HOME}/outputs
      - run:
          name: Run participant2-level analysis for subject 01
          command: docker run -ti --rm --read-only -v /tmp:/tmp -v /var/tmp:/var/tmp -v ${HOME}/data:/bids_dataset -v ${HOME}/outputs:/outputs bids/${CIRCLE_PROJECT_REPONAME,,} /bids_dataset /outputs participant2 --participant_label 01 --parcellation aal --streamlines 100000
          no_output_timeout: 6h
      - run:
          name: Run participant2-level analysis for subject 02
          command: docker run -ti --rm --read-only -v /tmp:/tmp -v /var/tmp:/var/tmp -v ${HOME}/data:/bids_dataset -v ${HOME}/outputs:/outputs bids/${CIRCLE_PROJECT_REPONAME,,} /bids_dataset /outputs participant2 --participant_label 02 --parcellation aal --streamlines 100000
          no_output_timeout: 6h
      - run:
          name: Run group-level analysis
          command: docker run -ti --rm --read-only -v /tmp:/tmp -v /var/tmp:/var/tmp -v ${HOME}/data:/bids_dataset -v ${HOME}/outputs:/outputs bids/${CIRCLE_PROJECT_REPONAME,,} /bids_dataset /outputs group
          no_output_timeout: 6h
      
      - store_artifacts:
          path: "~/output"

 
  deploy:
    docker:
      - image: circleci/classic:latest

    steps:
      - checkout
      - restore_cache:
          key: image_cache-{{ git describe --tags --always }}-{{ .Revision }}-{{ epoch }}
      - run:
          name: Load Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Push "latest" tag to DockerHub
          command: if [[ -n "$DOCKER_PASS" ]]; then docker login -u $DOCKER_USER -p $DOCKER_PASS && docker push bids/${CIRCLE_PROJECT_REPONAME,,}:latest; fi
          no_output_timeout: 6h
      - run:
          name: Create named tag and push to DockerHub
          command: if [[ -n "$DOCKER_PASS" ]]; then docker login -u $DOCKER_USER -p $DOCKER_PASS && docker tag bids/${CIRCLE_PROJECT_REPONAME,,} bids/${CIRCLE_PROJECT_REPONAME,,}:$CIRCLE_TAG && docker push bids/${CIRCLE_PROJECT_REPONAME,,}:$CIRCLE_TAG; fi
          no_output_timeout: 6h

workflows:
  version: 2.1
  build_test_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - deploy:
          requires:
            - build
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
